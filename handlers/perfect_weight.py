import random

from typing_ import Response, AliceUserRequest
from fsm import FSMContext
from tools import any_from

from states import MainGroup


def weight_handler(context: FSMContext, req: AliceUserRequest, resp: dict | Response) -> dict | Response:
    state = context.state
    command = req.request.command

    if state == MainGroup.Weight.state_1:
        if any_from('–º—É–∂', '–º–∞–ª', '–¥–∂–µ–Ω', in_=command):
            sex = 'male'

        elif any_from('–∂–µ–Ω', '–¥–µ–≤', '–ª–µ–¥', in_=command):
            sex = 'female'
        answer_options = ['–¢–∞–∫–∂–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –í–∞—à —Ä–æ—Å—Ç. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.', '–ß—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å, –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à —Ä–æ—Å—Ç. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
                          '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–æ—Å—Ç –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é —Ä–∞—Å—Å—á–∏—Ç–∞—é –í–∞—à —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å.', '–¢–∞–∫–∂–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å –í–∞—à —Ä–æ—Å—Ç. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.']
        resp.update({
                    'response': {
                        'text': f'{random.choice(answer_options)}'
                    }
                })

        # st = command.replace(',', '.')
        # li = st.split(' ')
        # for el in li:
        #     el = el.replace(',', '.')
        #     if el.replace('.', '').isdecimal() and el.count('.') <= 1:
        #         answer_options = [
        #             f'–í–∞—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã {float(el) * 30} –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤ –≤ –¥–µ–Ω—å üí¶',
        #
        #             f'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {float(el) * 30} –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã üåä –≤ –¥–µ–Ω—å, –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞. ']
        #         resp.update({
        #             'response': {
        #                 'text': f'{random.choice(answer_options)}',
        #                 'card': {
        #                     'type': 'ItemsList',
        #                     'header': {
        #                         'text': f'{random.choice(answer_options)}'
        #                     },
        #                     'items': [
        #                         {"title": '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑', 'button': {"text": '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑'},
        #                          "description": '–æ–ø–∏—Å–∞–Ω–∏–µ...', "image_id": '997614/15f977696a281092bcc0'},
        #                         {"title": '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É', "button": {"text": '–ù–∞–∑–∞–¥'},
        #                          "description": '–æ–ø–∏—Å–∞–Ω–∏–µ...', "image_id": '1030494/cc3631c8499cdc8daf8b'}
        #
        #                     ]
        #                 }
        #             }
        #         })
        #         context.set_state(MainGroup.Water.end)
        #         break
            else:
                resp.update({
                    'response': {
                        'text': f'–ù–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞ –≤–∞—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞'
                    }
                })
    elif state == MainGroup.Water.end and \
            ('–µ—â—ë' in command or '—Å—á–∏—Ç' in command):
        resp.update({
            'response': {
                'text': '–°–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö'
            }
        })
        context.set_state(MainGroup.Water.state_1)
    return resp
