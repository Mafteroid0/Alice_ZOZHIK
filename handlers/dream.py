import random

from tools import any_from
from typing_ import Response, AliceUserRequest, ResponseField
from fsm import FSMContext
from tools.time_parsing import parse_time, iter_go_sleep_time
from logging_ import logger

from states import MainGroup


def process_time_parsing_error(context: FSMContext, req: AliceUserRequest, resp: dict | Response) -> dict | Response:
    texts = (
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è?',

        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è? '
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.',

        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è? '
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 12:34.'
    )

    errors_count = context.data.get('errors_count', 0)

    resp.response = ResponseField(
        text=texts[errors_count]
    )
    context.update_data(errors_count=errors_count + 1)

    return resp


def dream_handler(context: FSMContext, req: AliceUserRequest, resp: dict | Response) -> dict | Response:
    if context.state == MainGroup.Dream.state_1:
        try:
            time = parse_time(req.request.command)
        except RuntimeError as e:
            logger.exception(f'{e}')
            resp.response = ResponseField(
                text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è. –õ—É—á—à–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç —Å–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É 12:34',
                tts='–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª–∞ –≤–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ: –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è. –õ—É—á—à–µ –≤—Å–µ–≥–æ –±—É–¥–µ—Ç —Å–∫–∞–∑–∞—Ç—å –µ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å —Ç—Ä–∏–¥—Ü–∞—Ç—å —á–µ—Ç—ã—Ä–µ'
            )  # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –≤ process_time_parsing_error
        else:
            try:
                go_sleep_times = list(iter_go_sleep_time(time))
                print(time)
                print(go_sleep_times)
                answer_options = [
                    f'–ß—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–Ω—ã–º —Å–∏–ª –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è, –í–∞–º —Å–ª–µ–¥—É–µ—Ç –ª–µ—á—å —Å–ø–∞—Ç—å –≤ {go_sleep_times[0].strftime("%H:%M")} '
                    f'–∏–ª–∏ –≤ {go_sleep_times[1].strftime("%H:%M")}üò¥. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫!',

                    f'–õ–æ–∂–∏—Ç–µ—Å—å —Å–ø–∞—Ç—å –≤ {go_sleep_times[0].strftime("%H:%M")} –∏–ª–∏ –≤ {go_sleep_times[1].strftime("%H:%M")}, '
                    f'—á—Ç–æ–±—ã —É—Ç—Ä–æ–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ø–æ–ª–Ω—ã–º —Å–∏–ª. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Å—Ç–∏ –±—É–¥–∏–ª—å–Ω–∏–∫!']
                resp.update({
                    'response': {
                        'text': f'{random.choice(answer_options)}',
                        'card': {
                            'type': 'ItemsList',
                            'header': {
                                'text': f'{random.choice(answer_options)}'
                            },
                            'items': [
                                {"title": '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑', 'button': {"text": '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—â—ë —Ä–∞–∑'},
                                 "description": '', "image_id": '997614/15f977696a281092bcc0'},
                                {"title": '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–ø–∏—Å–∫—É', "button": {"text": '–ù–∞–∑–∞–¥'},
                                 "description": '', "image_id": '1030494/cc3631c8499cdc8daf8b'}
                            ]
                        }
                    }
                })
                MainGroup.Dream.end.set(context)
            except Exception as e:
                logger.exception(f'{e}')
                process_time_parsing_error(context, req, resp)
            else:
                context.update_data(errors_count=0)

    elif context.state == MainGroup.Dream.end and any_from('–µ—â—ë', '–µ—â–µ', '—Å–Ω–æ–≤', '—Ä–∞—Å', in_=req.request.command):
        resp.response = ResponseField(
            text=[
                '–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è?',
                '–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ—Å–Ω—É—Ç—å—Å—è?'
            ],
        )
        MainGroup.Dream.state_1.set(context)

    return resp
