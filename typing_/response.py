import copy
from dataclasses import dataclass, field, asdict
from enum import Enum

ButtonDict = dict[str, str | bool]

ItemButtonDict = dict[str, str]
ItemDict = dict[str, str | ItemButtonDict]

CardItemsListHeaderDict = dict[str, str]
CardDict = dict[str, str | CardItemsListHeaderDict | list[ItemDict] | list[ButtonDict]]

ResponseFieldDict = dict[str, str | CardDict]

ResponseDict = dict[str, str, ResponseFieldDict]


@dataclass
class RespDataClass:
    def to_dict(self) -> dict:
        return {key: value for key, value in asdict(self).items() if value is not None}

        # res = {}
        # for key in self.__annotations__.keys():
        #     value = getattr(self, key)
        #     if value is not None:
        #         res[key] = value
        # return res


@dataclass
class Button(RespDataClass):
    title: str
    hide: bool = True


@dataclass
class ItemButton(RespDataClass):
    text: str


@dataclass
class Item(RespDataClass):
    title: str
    image_id: str
    button: ItemButton | ItemButtonDict | None = None


class CardType(Enum):
    ItemsList: str = 'ItemsList'
    BigImage: str = 'BigImage'


@dataclass
class AbstractCard(RespDataClass):
    type: CardType


@dataclass
class CardItemsListHeader(RespDataClass):
    text: str


@dataclass
class ItemsListCard(AbstractCard, RespDataClass):
    type: CardType.ItemsList
    header: CardItemsListHeader
    items: list[Item | ItemDict]


@dataclass
class BigImageCard(AbstractCard, RespDataClass):
    type: CardType.BigImage
    image_id: str
    title: str
    description: str


@dataclass(kw_only=True)
class Card(ItemsListCard, BigImageCard):
    # –î–∞, –Ω–µ–º–Ω–æ–≥–æ —Ö–∞—Ä–¥–∫–æ–¥. –î–∞, —Ä–∏—Å–∫ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–π –æ–±—ä–µ–∫—Ç–æ–≤.
    # –ù–æ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ –∏ —á—Ç–æ–±—ã –ø—Ä–∏ —ç—Ç–æ–º –ø–∞–π—á–∞—Ä–º –≤–∏–¥–µ–ª —Ç–∞–π–ø—Ö–∏–Ω—Ç—ã —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª (–ø–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –º–æ–π –Ω–∏–∫, –ª–æ–ª)
    type: CardType
    header: CardItemsListHeader | CardItemsListHeaderDict | None = None
    items: list[Item | ItemDict] | None = None
    image_id: str | None = None
    title: str | None = None
    description: str | None = None


@dataclass
class ResponseField(RespDataClass):
    text: str
    tts: str | None = None
    card: Card | ItemsListCard | BigImageCard | CardDict | None = None
    buttons: list[Button | ButtonDict] = field(default_factory=lambda: copy.deepcopy([Button('–ü–æ–º–æ—â—å', hide=False)]))


@dataclass
class Response(RespDataClass):
    version: str
    session: str
    response: ResponseField | dict


r = Response(
    version='1.0',
    session='',
    response=ResponseField(
        text='–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ! –ü–æ–æ—á–µ—Ä—ë–¥–Ω–æ–µ —Å–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø–æ–¥–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–ª–µ–Ω–µ–π –∫ –≥—Ä—É–¥–∏',
        card=Card(
            type=CardType.BigImage,
            image_id='997614/15bfafd8b629b323890b',
            title='–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1',
            description='–ü–æ–æ—á–µ—Ä—ë–¥–Ω–æ–µ —Å–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –ø–æ–¥–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–ª–µ–Ω–µ–π –∫ –≥—Ä—É–¥–∏'
        ),
        buttons=[
            Button(title='–í—ã–ø–æ–ª–Ω–∏—Ç—åüî•'),
            Button(title='–ø–æ–¥—Ä–æ–±–Ω–µ–µüìÑ'),
            Button(title='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å‚è≠')
        ]

    )
)

print(r.to_dict())
